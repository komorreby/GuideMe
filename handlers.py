from aiogram import types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from database import museum_database
from ai_assistant import get_ai_response
from image_recognition import ImageRecognizer
from gtts import gTTS
import aiofiles
import os
import re
from loguru import logger
from typing import List, Dict
from datetime import datetime

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º
class UserState(StatesGroup):
    main_menu = State()
    exploring_halls = State()
    exploring_exhibits = State()
    asking_question = State()
    route_navigation = State()
    hall_to_hall_navigation = State()
    selecting_from_hall = State()
    selecting_to_hall = State()
    leaving_feedback = State()
    selecting_rating = State()
    booking_tour = State()

def remove_emoji(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    emoji_pattern = re.compile(
        "["
        "\U0001F600-\U0001F64F"
        "\U0001F300-\U0001F5FF"
        "\U0001F680-\U0001F6FF"
        "\U0001F700-\U0001F77F"
        "\U0001F780-\U0001F7FF"
        "\U0001F800-\U0001F8FF"
        "\U0001F900-\U0001F9FF"
        "\U0001FA00-\U0001FA6F"
        "\U0001FA70-\U0001FAFF"
        "\U00002700-\U000027BF"
        "\U00002600-\U000026FF"
        "]+",
        flags=re.UNICODE
    )
    return emoji_pattern.sub(r"", text).strip()

async def send_voice_message(message_or_callback: types.Message | types.CallbackQuery, text: str, lang: str = "ru"):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —É–¥–∞–ª—è—è —ç–º–æ–¥–∑–∏."""
    try:
        clean_text = remove_emoji(text).replace("*", "")
        if not clean_text:
            clean_text = "–¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç."

        tts = gTTS(text=clean_text, lang=lang)
        audio_path = "voice_message.mp3"
        tts.save(audio_path)

        with open(audio_path, "rb") as audio_file:
            if isinstance(message_or_callback, types.Message):
                await message_or_callback.reply_voice(
                    voice=types.BufferedInputFile(audio_file.read(), filename="voice_message.mp3")
                )
            else:
                await message_or_callback.message.reply_voice(
                    voice=types.BufferedInputFile(audio_file.read(), filename="voice_message.mp3")
                )

        os.remove(audio_path)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.reply(error_msg)
        else:
            await message_or_callback.message.reply(error_msg)

def setup(dp):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX."""
    recognizer = ImageRecognizer()

    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é (—Ä–µ–ø–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    def get_main_menu():
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üèõÔ∏è –ó–∞–ª—ã"), KeyboardButton(text="üñºÔ∏è –≠–∫—Å–ø–æ–Ω–∞—Ç—ã")],
                [KeyboardButton(text="‚ùì FAQ")],
                [KeyboardButton(text="üåç –ú–∞—Ä—à—Ä—É—Ç"), KeyboardButton(text="üó∫Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –∑–∞–ª–∞–º–∏")],
                [KeyboardButton(text="üí¨ –í–æ–ø—Ä–æ—Å AI"), KeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
                [KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é"), KeyboardButton(text="üîô –í –Ω–∞—á–∞–ª–æ")],
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )

    # –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
    def get_navigation_keyboard(exclude_section: str = None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏."""
        sections = [
            ("üèõÔ∏è –ó–∞–ª—ã", "go_to_halls"),
            ("üñºÔ∏è –≠–∫—Å–ø–æ–Ω–∞—Ç—ã", "go_to_exhibits"),
            ("‚ùì FAQ", "go_to_faq"),
            ("üåç –ú–∞—Ä—à—Ä—É—Ç", "go_to_route"),
            ("üó∫Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è", "go_to_hall_to_hall"),
            ("üí¨ –í–æ–ø—Ä–æ—Å AI", "go_to_ask_ai"),
            ("üìù –û—Ç–∑—ã–≤", "go_to_feedback"),
            ("üìÖ –≠–∫—Å–∫—É—Ä—Å–∏—è", "go_to_book_tour"),
            ("üîô –í –Ω–∞—á–∞–ª–æ", "back_to_menu")
        ]
        keyboard = []
        row = []
        for text, callback in sections:
            if exclude_section and callback == exclude_section:
                continue
            row.append(InlineKeyboardButton(text=text, callback_data=callback))
            if len(row) == 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
                keyboard.append(row)
                row = []
        if row:
            keyboard.append(row)
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    # –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∑–∞–ª–∞–º
    def get_hall_navigation(halls: List[Dict]):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–ª–æ–≤."""
        buttons = [
            InlineKeyboardButton(text=hall["name"], callback_data=f"hall_{hall['id']}")
            for hall in halls
        ]
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3
        inline_kb = [buttons[i:i+3] for i in range(0, len(buttons), 3)]
        inline_kb.append([
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="next_hall"),
            InlineKeyboardButton(text="–û–∑–≤—É—á–∏—Ç—å", callback_data="voice_hall")
        ])
        navigation = get_navigation_keyboard(exclude_section="go_to_halls")
        inline_kb.extend(navigation.inline_keyboard)
        return InlineKeyboardMarkup(inline_keyboard=inline_kb)

    # –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–ª–∞ (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –∑–∞–ª–∞–º–∏)
    def get_hall_selection_keyboard(prefix: str, halls: List[Dict], exclude_hall_id: int = None, voice_callback: str = None):
        keyboard = []
        for hall in halls:
            if exclude_hall_id and hall["id"] == exclude_hall_id:
                continue
            keyboard.append([InlineKeyboardButton(text=hall["name"], callback_data=f"{prefix}_{hall['id']}")])
        if voice_callback:
            keyboard.append([InlineKeyboardButton(text="–û–∑–≤—É—á–∏—Ç—å", callback_data=voice_callback)])
        navigation = get_navigation_keyboard(exclude_section="go_to_hall_to_hall")
        keyboard.extend(navigation.inline_keyboard)
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    # –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–∫—É—Ä—Å–∏–∏
    def get_tour_time_keyboard():
        times = [
            ("10:00", "tour_time_10_00"),
            ("12:00", "tour_time_12_00"),
            ("14:00", "tour_time_14_00"),
            ("16:00", "tour_time_16_00")
        ]
        keyboard = []
        for time, callback in times:
            keyboard.append([InlineKeyboardButton(text=time, callback_data=callback)])
        navigation = get_navigation_keyboard(exclude_section="go_to_book_tour")
        keyboard.extend(navigation.inline_keyboard)
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    # –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    def get_rating_keyboard():
        ratings = [
            ("‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ (1)", "rating_1"),
            ("‚òÖ‚òÖ‚òÜ‚òÜ‚òÜ (2)", "rating_2"),
            ("‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ (3)", "rating_3"),
            ("‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ (4)", "rating_4"),
            ("‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ (5)", "rating_5")
        ]
        keyboard = []
        for rating, callback in ratings:
            keyboard.append([InlineKeyboardButton(text=rating, callback_data=callback)])
        navigation = get_navigation_keyboard(exclude_section="go_to_feedback")
        keyboard.extend(navigation.inline_keyboard)
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @dp.message(Command("start"))
    async def send_welcome(message: types.Message, state: FSMContext):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π QR-–∫–æ–¥–æ–≤."""
        user_id = message.from_user.id
        text = message.text.strip()
        param = None
        if text.startswith("/start "):
            param = text.split(" ", 1)[1]

        if param:
            if param.startswith("hall_"):
                try:
                    hall_id = int(param.split("_")[1])
                    hall = museum_database.get_hall_info(hall_id)
                    if hall:
                        await state.update_data(current_hall_id=hall_id)
                        response = (
                            f"üìç –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤: *{hall['name']}*\n"
                            f"{hall['description']}\n"
                            f"–ü–µ—Ä–∏–æ–¥: {hall['art_period']}\n\n"
                            f"–ö—É–¥–∞ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–π—Ç–∏?"
                        )
                        halls = museum_database.get_all_halls()
                        keyboard = get_hall_selection_keyboard("to_hall", halls, exclude_hall_id=hall_id, voice_callback="voice_to_hall")
                        await state.update_data(current_to_hall_text=response)
                        await message.reply(response, parse_mode="Markdown", reply_markup=keyboard)
                        await state.set_state(UserState.selecting_to_hall)
                        return
                except (IndexError, ValueError):
                    pass

        welcome_text = (
            "üé® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑–µ–π –∏—Å–∫—É—Å—Å—Ç–≤! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –≥–∏–¥. "
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ!"
        )
        await message.reply(welcome_text, reply_markup=get_main_menu())
        await state.set_state(UserState.main_menu)

    @dp.message(lambda message: message.text == "üèõÔ∏è –ó–∞–ª—ã", UserState.main_menu)
    async def start_halls_exploration(message: types.Message, state: FSMContext):
        """–ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞–ª–æ–≤ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏."""
        halls = museum_database.get_all_halls()
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:", reply_markup=get_hall_navigation(halls))
        await state.set_state(UserState.exploring_halls)
        await state.update_data(hall_index=0, halls=halls)

    @dp.callback_query(lambda c: c.data == "go_to_halls")
    async def go_to_halls(callback: types.CallbackQuery, state: FSMContext):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª '–ó–∞–ª—ã'."""
        halls = museum_database.get_all_halls()
        await callback.message.delete()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:", reply_markup=get_hall_navigation(halls))
        await state.set_state(UserState.exploring_halls)
        await state.update_data(hall_index=0, halls=halls)
        await callback.answer()

    @dp.callback_query(lambda c: c.data.startswith("hall_"), UserState.exploring_halls)
    async def show_hall_details(callback: types.CallbackQuery, state: FSMContext):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ª–µ –ø–æ –≤—ã–±–æ—Ä—É."""
        hall_id = int(callback.data.split("_")[1])
        hall = museum_database.get_hall_info(hall_id)
        if hall:
            response = f"*{hall['name']}*\n{hall['description']}\nüìç {hall['location']}\n–ü–µ—Ä–∏–æ–¥: {hall['art_period']}\n–≠–∫—Å–ø–æ–Ω–∞—Ç–æ–≤: {hall['exhibit_count']}"
            await state.update_data(current_hall_text=response)
            halls = museum_database.get_all_halls()
            await callback.message.edit_text(response, parse_mode="Markdown", reply_markup=get_hall_navigation(halls))
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "voice_hall", UserState.exploring_halls)
    async def voice_hall_details(callback: types.CallbackQuery, state: FSMContext):
        """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∑–∞–ª–µ."""
        data = await state.get_data()
        hall_text = data.get("current_hall_text", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        await send_voice_message(callback, hall_text)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "next_hall", UserState.exploring_halls)
    async def next_hall(callback: types.CallbackQuery, state: FSMContext):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–ª—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."""
        data = await state.get_data()
        hall_index = data.get("hall_index", 0) + 1
        halls = data.get("halls", museum_database.get_all_halls())
        if hall_index < len(halls):
            hall = halls[hall_index]
            response = f"*{hall['name']}*\n{hall['description']}\nüìç {hall['location']}\n–ü–µ—Ä–∏–æ–¥: {hall['art_period']}\n–≠–∫—Å–ø–æ–Ω–∞—Ç–æ–≤: {hall['exhibit_count']}"
            await state.update_data(hall_index=hall_index, current_hall_text=response)
            await callback.message.edit_text(response, parse_mode="Markdown", reply_markup=get_hall_navigation(halls))
        else:
            await callback.message.edit_text("–í—Å–µ –∑–∞–ª—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!", reply_markup=get_hall_navigation(halls))
        await callback.answer()

    @dp.message(lambda message: message.text == "üñºÔ∏è –≠–∫—Å–ø–æ–Ω–∞—Ç—ã", UserState.main_menu)
    async def start_exhibits_exploration(message: types.Message, state: FSMContext):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∫–∞–∑–∞ —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤."""
        exhibits = museum_database.get_all_exhibits()
        await state.update_data(exhibits=exhibits, exhibit_index=0)
        await show_next_exhibit(message, state)
        await state.set_state(UserState.exploring_exhibits)

    async def show_next_exhibit(message_or_callback: types.Message | types.CallbackQuery, state: FSMContext):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–∫—Å–ø–æ–Ω–∞—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        data = await state.get_data()
        exhibits = data["exhibits"]
        index = data.get("exhibit_index", 0)
        if index < len(exhibits):
            ex = exhibits[index]
            response = f"*{ex['title']}*\n–ê–≤—Ç–æ—Ä: {ex['artist']}\n{ex['description']}\n–°—Ç–∏–ª—å: {ex['art_style']}\n–ì–æ–¥: {ex['creation_year']}"
            inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="next_exhibit"),
                 InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="prev_exhibit")],
                [InlineKeyboardButton(text="–û–∑–≤—É—á–∏—Ç—å", callback_data="voice_exhibit")]
            ])
            navigation = get_navigation_keyboard(exclude_section="go_to_exhibits")
            inline_kb.inline_keyboard.extend(navigation.inline_keyboard)
            await state.update_data(current_exhibit_text=response)
            if isinstance(message_or_callback, types.Message):
                await message_or_callback.reply(response, parse_mode="Markdown", reply_markup=inline_kb)
            else:
                await message_or_callback.message.edit_text(response, parse_mode="Markdown", reply_markup=inline_kb)

    @dp.callback_query(lambda c: c.data == "go_to_exhibits")
    async def go_to_exhibits(callback: types.CallbackQuery, state: FSMContext):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª '–≠–∫—Å–ø–æ–Ω–∞—Ç—ã'."""
        exhibits = museum_database.get_all_exhibits()
        await state.update_data(exhibits=exhibits, exhibit_index=0)
        await callback.message.delete()
        await show_next_exhibit(callback, state)
        await state.set_state(UserState.exploring_exhibits)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "voice_exhibit", UserState.exploring_exhibits)
    async def voice_exhibit_details(callback: types.CallbackQuery, state: FSMContext):
        """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —ç–∫—Å–ø–æ–Ω–∞—Ç–µ."""
        data = await state.get_data()
        exhibit_text = data.get("current_exhibit_text", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Å–ø–æ–Ω–∞—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        await send_voice_message(callback, exhibit_text)
        await callback.answer()

    @dp.callback_query(lambda c: c.data in ["next_exhibit", "prev_exhibit"], UserState.exploring_exhibits)
    async def navigate_exhibits(callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —ç–∫—Å–ø–æ–Ω–∞—Ç–∞–º –≤–ø–µ—Ä—ë–¥ –∏ –Ω–∞–∑–∞–¥."""
        data = await state.get_data()
        index = data.get("exhibit_index", 0)
        if callback.data == "next_exhibit":
            index += 1
        else:
            index = max(0, index - 1)
        await state.update_data(exhibit_index=index)
        await show_next_exhibit(callback, state)
        await callback.answer()

    @dp.message(lambda message: message.text == "‚ùì FAQ", UserState.main_menu)
    async def show_faq(message: types.Message, state: FSMContext):
        """–ü–æ–∫–∞–∑ FAQ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è."""
        faqs = museum_database.get_faq()
        response = "‚ùì FAQ:\n\n" + "\n".join(f"‚ùî {q}\nüí° {a}" for q, a in faqs[:10])
        if len(faqs) > 10:
            response += "\n\n–ò –µ—â—ë –±–æ–ª—å—à–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —É AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞!"
        
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[])
        for idx, (question, answer) in enumerate(faqs[:10]):
            faq_text = f"‚ùî {question}\nüí° {answer}"
            inline_kb.inline_keyboard.append([
                InlineKeyboardButton(text=f"–û–∑–≤—É—á–∏—Ç—å #{idx + 1}", callback_data=f"voice_faq_{idx}")
            ])
        navigation = get_navigation_keyboard(exclude_section="go_to_faq")
        inline_kb.inline_keyboard.extend(navigation.inline_keyboard)

        await state.update_data(faqs=faqs)
        await message.reply(response, reply_markup=inline_kb)

    @dp.callback_query(lambda c: c.data == "go_to_faq")
    async def go_to_faq(callback: types.CallbackQuery, state: FSMContext):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª 'FAQ'."""
        faqs = museum_database.get_faq()
        response = "‚ùì FAQ:\n\n" + "\n".join(f"‚ùî {q}\nüí° {a}" for q, a in faqs[:10])
        if len(faqs) > 10:
            response += "\n\n–ò –µ—â—ë –±–æ–ª—å—à–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —É AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞!"
        
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[])
        for idx, (question, answer) in enumerate(faqs[:10]):
            faq_text = f"‚ùî {question}\nüí° {answer}"
            inline_kb.inline_keyboard.append([
                InlineKeyboardButton(text=f"–û–∑–≤—É—á–∏—Ç—å #{idx + 1}", callback_data=f"voice_faq_{idx}")
            ])
        navigation = get_navigation_keyboard(exclude_section="go_to_faq")
        inline_kb.inline_keyboard.extend(navigation.inline_keyboard)

        await state.update_data(faqs=faqs)
        await callback.message.delete()
        await callback.message.answer(response, reply_markup=inline_kb)
        await callback.answer()

    @dp.callback_query(lambda c: c.data.startswith("voice_faq_"))
    async def voice_faq(callback: types.CallbackQuery, state: FSMContext):
        """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞ –∏–∑ FAQ."""
        faq_index = int(callback.data.split("_")[-1])
        data = await state.get_data()
        faqs = data.get("faqs", [])
        if faq_index < len(faqs):
            question, answer = faqs[faq_index]
            faq_text = f"–í–æ–ø—Ä–æ—Å: {question} –û—Ç–≤–µ—Ç: {answer}"
            await send_voice_message(callback, faq_text)
        else:
            await callback.message.reply("–û—à–∏–±–∫–∞: FAQ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()

    @dp.message(lambda message: message.text == "üåç –ú–∞—Ä—à—Ä—É—Ç", UserState.main_menu)
    async def start_route(message: types.Message, state: FSMContext):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å –ø–æ—à–∞–≥–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π."""
        halls = museum_database.get_all_halls()
        steps = [f"{i+1}. {hall['name']}: {hall['description'].split('.')[0]}." for i, hall in enumerate(halls)]
        steps.append(f"{len(halls)+1}. –í—ã—Ö–æ–¥: –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç—É—Ä —É —Å—É–≤–µ–Ω–∏—Ä–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.")
        await state.update_data(route_steps=steps, route_step=0)
        await show_route_step(message, state)
        await state.set_state(UserState.route_navigation)

    @dp.callback_query(lambda c: c.data == "go_to_route")
    async def go_to_route(callback: types.CallbackQuery, state: FSMContext):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª '–ú–∞—Ä—à—Ä—É—Ç'."""
        halls = museum_database.get_all_halls()
        steps = [f"{i+1}. {hall['name']}: {hall['description'].split('.')[0]}." for i, hall in enumerate(halls)]
        steps.append(f"{len(halls)+1}. –í—ã—Ö–æ–¥: –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç—É—Ä —É —Å—É–≤–µ–Ω–∏—Ä–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.")
        await state.update_data(route_steps=steps, route_step=0)
        await callback.message.delete()
        await show_route_step(callback, state)
        await state.set_state(UserState.route_navigation)
        await callback.answer()

    async def show_route_step(message_or_callback: types.Message | types.CallbackQuery, state: FSMContext):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∞–≥–∞ –º–∞—Ä—à—Ä—É—Ç–∞."""
        data = await state.get_data()
        steps = data["route_steps"]
        step = data.get("route_step", 0)
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="next_step"),
             InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="prev_step")]
        ])
        navigation = get_navigation_keyboard(exclude_section="go_to_route")
        inline_kb.inline_keyboard.extend(navigation.inline_keyboard)
        response = f"üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç:\n{steps[step]}"
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.reply(response, reply_markup=inline_kb)
        else:
            await message_or_callback.message.edit_text(response, reply_markup=inline_kb)

    @dp.callback_query(lambda c: c.data in ["next_step", "prev_step"], UserState.route_navigation)
    async def navigate_route(callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —à–∞–≥–∞–º –º–∞—Ä—à—Ä—É—Ç–∞."""
        data = await state.get_data()
        steps = data["route_steps"]
        step = data.get("route_step", 0)
        if callback.data == "next_step":
            step = min(step + 1, len(steps) - 1)
        else:
            step = max(0, step - 1)
        await state.update_data(route_step=step)
        await show_route_step(callback, state)
        await callback.answer()

    @dp.message(lambda message: message.text == "üó∫Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –∑–∞–ª–∞–º–∏", UserState.main_menu)
    async def start_hall_to_hall_navigation(message: types.Message, state: FSMContext):
        """–ó–∞–ø—É—Å–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –∑–∞–ª–∞–º–∏ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è."""
        data = await state.get_data()
        current_hall_id = data.get("current_hall_id")
        halls = museum_database.get_all_halls()
        if current_hall_id:
            hall = museum_database.get_hall_info(current_hall_id)
            response = f"üìç –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤: *{hall['name']}*\n–ö—É–¥–∞ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–π—Ç–∏?"
            keyboard = get_hall_selection_keyboard("to_hall", halls, exclude_hall_id=current_hall_id, voice_callback="voice_to_hall")
            await state.update_data(current_to_hall_text=response)
            await message.reply(response, parse_mode="Markdown", reply_markup=keyboard)
            await state.set_state(UserState.selecting_to_hall)
        else:
            response = "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª –≤—Ä—É—á–Ω—É—é:"
            await message.reply(response)
            response = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ:"
            keyboard = get_hall_selection_keyboard("from_hall", halls, voice_callback="voice_from_hall")
            await state.update_data(current_from_hall_text=response)
            await message.reply(response, reply_markup=keyboard)
            await state.set_state(UserState.selecting_from_hall)

    @dp.callback_query(lambda c: c.data == "go_to_hall_to_hall")
    async def go_to_hall_to_hall(callback: types.CallbackQuery, state: FSMContext):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª '–ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –∑–∞–ª–∞–º–∏'."""
        data = await state.get_data()
        current_hall_id = data.get("current_hall_id")
        halls = museum_database.get_all_halls()
        await callback.message.delete()
        if current_hall_id:
            hall = museum_database.get_hall_info(current_hall_id)
            response = f"üìç –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤: *{hall['name']}*\n–ö—É–¥–∞ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–π—Ç–∏?"
            keyboard = get_hall_selection_keyboard("to_hall", halls, exclude_hall_id=current_hall_id, voice_callback="voice_to_hall")
            await state.update_data(current_to_hall_text=response)
            await callback.message.answer(response, parse_mode="Markdown", reply_markup=keyboard)
            await state.set_state(UserState.selecting_to_hall)
        else:
            response = "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª –≤—Ä—É—á–Ω—É—é:"
            await callback.message.answer(response)
            response = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ:"
            keyboard = get_hall_selection_keyboard("from_hall", halls, voice_callback="voice_from_hall")
            await state.update_data(current_from_hall_text=response)
            await callback.message.answer(response, reply_markup=keyboard)
            await state.set_state(UserState.selecting_from_hall)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "voice_from_hall", UserState.selecting_from_hall)
    async def voice_from_hall(callback: types.CallbackQuery, state: FSMContext):
        """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ª–∞."""
        data = await state.get_data()
        from_hall_text = data.get("current_from_hall_text", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ.")
        await send_voice_message(callback, from_hall_text)
        await callback.answer()

    @dp.callback_query(lambda c: c.data.startswith("from_hall_"), UserState.selecting_from_hall)
    async def select_from_hall(callback: types.CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ª–∞."""
        from_hall_id = int(callback.data.split("_")[-1])
        halls = museum_database.get_all_halls()
        await state.update_data(from_hall_id=from_hall_id, current_hall_id=from_hall_id)
        from_hall = museum_database.get_hall_info(from_hall_id)
        response = f"–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –∏–∑: *{from_hall['name']}*\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–∞—Å—Ç—å:"
        keyboard = get_hall_selection_keyboard("to_hall", halls, exclude_hall_id=from_hall_id, voice_callback="voice_to_hall")
        await state.update_data(current_to_hall_text=response)
        await callback.message.edit_text(response, parse_mode="Markdown", reply_markup=keyboard)
        await state.set_state(UserState.selecting_to_hall)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "voice_to_hall", UserState.selecting_to_hall)
    async def voice_to_hall(callback: types.CallbackQuery, state: FSMContext):
        """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∑–∞–ª–∞."""
        data = await state.get_data()
        to_hall_text = data.get("current_to_hall_text", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–∞—Å—Ç—å.")
        await send_voice_message(callback, to_hall_text)
        await callback.answer()

    @dp.callback_query(lambda c: c.data.startswith("to_hall_"), UserState.selecting_to_hall)
    async def select_to_hall(callback: types.CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∑–∞–ª–∞ –∏ –ø–æ–∫–∞–∑ –º–∞—Ä—à—Ä—É—Ç–∞ —Å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ–º."""
        to_hall_id = int(callback.data.split("_")[-1])
        data = await state.get_data()
        from_hall_id = data.get("from_hall_id") or data.get("current_hall_id")
        if from_hall_id == to_hall_id:
            halls = museum_database.get_all_halls()
            response = "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —ç—Ç–æ–º –∑–∞–ª–µ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ª."
            keyboard = get_hall_selection_keyboard("to_hall", halls, exclude_hall_id=from_hall_id, voice_callback="voice_to_hall")
            await state.update_data(current_to_hall_text=response)
            await callback.message.edit_text(response, reply_markup=keyboard)
            await callback.answer()
            return

        from_hall = museum_database.get_hall_info(from_hall_id)
        to_hall = museum_database.get_hall_info(to_hall_id)
        route = museum_database.find_route(from_hall_id, to_hall_id)
        response = f"üó∫Ô∏è **–ú–∞—Ä—à—Ä—É—Ç –∏–∑ '{from_hall['name']}' –≤ '{to_hall['name']}':**\n\n{route}"
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–∑–≤—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", callback_data="voice_route"),
             InlineKeyboardButton(text="–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç", callback_data="new_hall_to_hall")]
        ])
        navigation = get_navigation_keyboard(exclude_section="go_to_hall_to_hall")
        inline_kb.inline_keyboard.extend(navigation.inline_keyboard)
        await state.update_data(current_route_text=response)
        await callback.message.edit_text(response, parse_mode="Markdown", reply_markup=inline_kb)
        await state.set_state(UserState.hall_to_hall_navigation)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "voice_route", UserState.hall_to_hall_navigation)
    async def voice_route(callback: types.CallbackQuery, state: FSMContext):
        """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞."""
        data = await state.get_data()
        route_text = data.get("current_route_text", "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        await send_voice_message(callback, route_text)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "new_hall_to_hall", UserState.hall_to_hall_navigation)
    async def new_hall_to_hall_navigation(callback: types.CallbackQuery, state: FSMContext):
        """–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –º–µ–∂–¥—É –∑–∞–ª–∞–º–∏."""
        data = await state.get_data()
        current_hall_id = data.get("current_hall_id")
        halls = museum_database.get_all_halls()
        if current_hall_id:
            hall = museum_database.get_hall_info(current_hall_id)
            response = f"üìç –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤: *{hall['name']}*\n–ö—É–¥–∞ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–π—Ç–∏?"
            keyboard = get_hall_selection_keyboard("to_hall", halls, exclude_hall_id=current_hall_id, voice_callback="voice_to_hall")
            await state.update_data(current_to_hall_text=response)
            await callback.message.edit_text(response, parse_mode="Markdown", reply_markup=keyboard)
            await state.set_state(UserState.selecting_to_hall)
        else:
            response = "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª –≤—Ä—É—á–Ω—É—é:"
            await callback.message.edit_text(response)
            response = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ:"
            keyboard = get_hall_selection_keyboard("from_hall", halls, voice_callback="voice_from_hall")
            await state.update_data(current_from_hall_text=response)
            await callback.message.edit_text(response, reply_markup=keyboard)
            await state.set_state(UserState.selecting_from_hall)
        await callback.answer()

    @dp.message(lambda message: message.text == "üí¨ –í–æ–ø—Ä–æ—Å AI", UserState.main_menu)
    async def start_asking(message: types.Message, state: FSMContext):
        """–ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ —Å AI."""
        inline_kb = get_navigation_keyboard(exclude_section="go_to_ask_ai")
        await message.reply("–°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ, –Ω–∞–π–¥–∏ —ç–∫—Å–ø–æ–Ω–∞—Ç –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç–∏–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è!", reply_markup=inline_kb)
        await state.set_state(UserState.asking_question)

    @dp.callback_query(lambda c: c.data == "go_to_ask_ai")
    async def go_to_ask_ai(callback: types.CallbackQuery, state: FSMContext):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª '–í–æ–ø—Ä–æ—Å AI'."""
        inline_kb = get_navigation_keyboard(exclude_section="go_to_ask_ai")
        await callback.message.delete()
        await callback.message.answer("–°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ, –Ω–∞–π–¥–∏ —ç–∫—Å–ø–æ–Ω–∞—Ç –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç–∏–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è!", reply_markup=inline_kb)
        await state.set_state(UserState.asking_question)
        await callback.answer()

    @dp.message(UserState.asking_question)
    async def handle_question_or_photo(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞, —Ñ–æ—Ç–æ –∏–ª–∏ –ø–æ–∏—Å–∫–∞ —Å AI."""
        if message.photo:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            photo = message.photo[-1]
            file_path = f"temp_{photo.file_id}.jpg"

            try:
                file = await message.bot.get_file(photo.file_id)
                await message.bot.download_file(file.file_path, file_path)
                logger.debug(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {file_path}")

                recognized_objects = recognizer.recognize_image(file_path)
                matches = recognizer.match_with_exhibits(recognized_objects)

                if matches:
                    response = "üîç –ù–∞–π–¥–µ–Ω—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ–Ω–∞—Ç—ã:\n\n"
                    for obj, exhibit in matches:
                        response += (
                            f"*{exhibit['title']}*\n"
                            f"–û–±—ä–µ–∫—Ç: {obj['class']} (–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {obj['confidence']:.2%})\n"
                            f"–ê–≤—Ç–æ—Ä: {exhibit['artist']}\n"
                            f"–û–ø–∏—Å–∞–Ω–∏–µ: {exhibit['description']}\n\n"
                        )
                else:
                    response = "üòï –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π —Å —ç–∫—Å–ø–æ–Ω–∞—Ç–∞–º–∏ –º—É–∑–µ—è.\n" + str(recognized_objects)

                inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data="voice_ai_response"),
                     InlineKeyboardButton(text="–ï—â—ë –≤–æ–ø—Ä–æ—Å", callback_data="more_questions")]
                ])
                navigation = get_navigation_keyboard(exclude_section="go_to_ask_ai")
                inline_kb.inline_keyboard.extend(navigation.inline_keyboard)
                await state.update_data(current_ai_response=response)
                await message.reply(response, parse_mode="Markdown", reply_markup=inline_kb)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
                await message.reply(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            finally:
                if os.path.exists(file_path):
                    os.remove(file_path)
                    logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path} —É–¥–∞–ª—ë–Ω")
        else:
            text = message.text.lower()
            if "–º–∞—Ä—à—Ä—É—Ç" in text or "–ø—É—Ç—å" in text or "–∫–∞–∫ –ø—Ä–æ–π—Ç–∏" in text:
                data = await state.get_data()
                current_hall_id = data.get("current_hall_id")
                halls = museum_database.get_all_halls()
                if current_hall_id:
                    hall = museum_database.get_hall_info(current_hall_id)
                    response = f"üìç –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤: *{hall['name']}*\n–ö—É–¥–∞ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–π—Ç–∏?"
                    keyboard = get_hall_selection_keyboard("to_hall", halls, exclude_hall_id=current_hall_id, voice_callback="voice_to_hall")
                    await state.update_data(current_to_hall_text=response)
                    await message.reply(response, parse_mode="Markdown", reply_markup=keyboard)
                    await state.set_state(UserState.selecting_to_hall)
                else:
                    response = "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª –≤—Ä—É—á–Ω—É—é:"
                    await message.reply(response)
                    response = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ:"
                    keyboard = get_hall_selection_keyboard("from_hall", halls, voice_callback="voice_from_hall")
                    await state.update_data(current_from_hall_text=response)
                    await message.reply(response, reply_markup=keyboard)
                    await state.set_state(UserState.selecting_from_hall)
            else:
                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                results = museum_database.search_exhibits(message.text)
                if results:
                    response = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n" + "\n".join(f"*{ex['title']}* ({ex['artist']})\n{ex['description']}" for ex in results)
                else:
                    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–µ—Ä–µ–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ GigaChat
                    response = get_ai_response(message.text)
                    if "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in response:
                        response = "üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ–Ω–∞—Ç–∞."

                inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data="voice_ai_response"),
                     InlineKeyboardButton(text="–ï—â—ë –≤–æ–ø—Ä–æ—Å", callback_data="more_questions")]
                ])
                navigation = get_navigation_keyboard(exclude_section="go_to_ask_ai")
                inline_kb.inline_keyboard.extend(navigation.inline_keyboard)
                await state.update_data(current_ai_response=response)
                await message.reply(response, parse_mode="Markdown", reply_markup=inline_kb)

    @dp.callback_query(lambda c: c.data == "voice_ai_response", UserState.asking_question)
    async def voice_ai_response(callback: types.CallbackQuery, state: FSMContext):
        """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ AI."""
        data = await state.get_data()
        ai_response = data.get("current_ai_response", "–û—Ç–≤–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        await send_voice_message(callback, ai_response)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "more_questions", UserState.asking_question)
    async def more_questions(callback: types.CallbackQuery, state: FSMContext):
        """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å AI."""
        inline_kb = get_navigation_keyboard(exclude_section="go_to_ask_ai")
        await callback.message.edit_text("–ó–∞–¥–∞–π –µ—â—ë –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ!", reply_markup=inline_kb)
        await callback.answer()

    @dp.message(lambda message: message.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", UserState.main_menu)
    async def start_leaving_feedback(message: types.Message, state: FSMContext):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞."""
        response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –º—É–∑–µ–π –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:"
        inline_kb = get_rating_keyboard()
        await message.reply(response, reply_markup=inline_kb)
        await state.set_state(UserState.selecting_rating)

    @dp.callback_query(lambda c: c.data == "go_to_feedback")
    async def go_to_feedback(callback: types.CallbackQuery, state: FSMContext):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'."""
        response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –º—É–∑–µ–π –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:"
        inline_kb = get_rating_keyboard()
        await callback.message.delete()
        await callback.message.answer(response, reply_markup=inline_kb)
        await state.set_state(UserState.selecting_rating)
        await callback.answer()

    @dp.callback_query(lambda c: c.data.startswith("rating_"), UserState.selecting_rating)
    async def process_rating(callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞."""
        rating = int(callback.data.split("_")[-1])
        await state.update_data(rating=rating)
        response = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –º—É–∑–µ–µ:"
        inline_kb = get_navigation_keyboard(exclude_section="go_to_feedback")
        await callback.message.edit_text(response, reply_markup=inline_kb)
        await state.set_state(UserState.leaving_feedback)
        await callback.answer()

    @dp.message(UserState.leaving_feedback)
    async def process_feedback(message: types.Message, state: FSMContext):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        feedback = message.text
        data = await state.get_data()
        rating = data.get("rating", 0)
        user_id = message.from_user.id
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        try:
            museum_database.save_feedback(user_id, rating, feedback, timestamp)
            logger.info(f"–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: user_id={user_id}, rating={rating}, feedback={feedback}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        response = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ –∏ –æ—Ü–µ–Ω–∫—É ({rating} ‚òÖ)! üòä –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ."
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–∑–≤—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", callback_data="voice_feedback_confirmation")]
        ])
        navigation = get_navigation_keyboard(exclude_section="go_to_feedback")
        inline_kb.inline_keyboard.extend(navigation.inline_keyboard)
        await state.update_data(feedback_confirmation=response)
        await message.reply(response, reply_markup=inline_kb)
        await state.set_state(UserState.main_menu)

    @dp.callback_query(lambda c: c.data == "voice_feedback_confirmation")
    async def voice_feedback_confirmation(callback: types.CallbackQuery, state: FSMContext):
        """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞."""
        data = await state.get_data()
        feedback_confirmation = data.get("feedback_confirmation", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        await send_voice_message(callback, feedback_confirmation)
        await callback.answer()

    @dp.message(lambda message: message.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é", UserState.main_menu)
    async def start_booking_tour(message: types.Message, state: FSMContext):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é."""
        response = "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —ç–∫—Å–∫—É—Ä—Å–∏–∏:"
        inline_kb = get_tour_time_keyboard()
        await message.reply(response, reply_markup=inline_kb)
        await state.set_state(UserState.booking_tour)

    @dp.callback_query(lambda c: c.data == "go_to_book_tour")
    async def go_to_book_tour(callback: types.CallbackQuery, state: FSMContext):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é'."""
        response = "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —ç–∫—Å–∫—É—Ä—Å–∏–∏:"
        inline_kb = get_tour_time_keyboard()
        await callback.message.delete()
        await callback.message.answer(response, reply_markup=inline_kb)
        await state.set_state(UserState.booking_tour)
        await callback.answer()

    @dp.callback_query(lambda c: c.data.startswith("tour_time_"), UserState.booking_tour)
    async def process_tour_booking(callback: types.CallbackQuery, state: FSMContext):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        time_slot = callback.data.replace("tour_time_", "").replace("_", ":")
        user_id = callback.message.chat.id
        date = datetime.now().strftime("%Y-%m-%d")
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        try:
            museum_database.save_booking(user_id, time_slot, date, timestamp)
            logger.info(f"–ó–∞–ø–∏—Å—å –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: user_id={user_id}, time_slot={time_slot}, date={date}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await callback.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        response = f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é –≤ {time_slot}! üéâ –ú—ã –∂–¥–µ–º –≤–∞—Å!"
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–∑–≤—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", callback_data="voice_booking_confirmation")]
        ])
        navigation = get_navigation_keyboard(exclude_section="go_to_book_tour")
        inline_kb.inline_keyboard.extend(navigation.inline_keyboard)
        await state.update_data(booking_confirmation=response)
        await callback.message.edit_text(response, reply_markup=inline_kb)
        await state.set_state(UserState.main_menu)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "voice_booking_confirmation")
    async def voice_booking_confirmation(callback: types.CallbackQuery, state: FSMContext):
        """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é."""
        data = await state.get_data()
        booking_confirmation = data.get("booking_confirmation", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        await send_voice_message(callback, booking_confirmation)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "back_to_menu")
    async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        await callback.message.delete()
        await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        await state.set_state(UserState.main_menu)
        await callback.answer()

    @dp.message(lambda message: message.text == "üîô –í –Ω–∞—á–∞–ª–æ")
    async def reset_to_menu(message: types.Message, state: FSMContext):
        """–†—É—á–Ω–æ–π —Å–±—Ä–æ—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        await state.set_state(UserState.main_menu)

    @dp.message()
    async def handle_free_text(message: types.Message, state: FSMContext):
        """–£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫."""
        current_state = await state.get_state()
        if current_state == UserState.main_menu.state:
            text = message.text.lower()
            if "–∑–∞–ª" in text:
                await start_halls_exploration(message, state)
            elif "—ç–∫—Å–ø–æ–Ω–∞—Ç" in text or "–∫–∞—Ä—Ç–∏–Ω" in text:
                await start_exhibits_exploration(message, state)
            elif "–º–∞—Ä—à—Ä—É—Ç" in text or "–ø—É—Ç—å" in text or "–∫–∞–∫ –ø—Ä–æ–π—Ç–∏" in text:
                await start_hall_to_hall_navigation(message, state)
            elif "–≤–æ–ø—Ä–æ—Å" in text or "?" in text or "–ø–æ–∏—Å–∫" in text or "–Ω–∞–π—Ç–∏" in text:
                await start_asking(message, state)
            elif "–æ—Ç–∑—ã–≤" in text:
                await start_leaving_feedback(message, state)
            elif "—ç–∫—Å–∫—É—Ä—Å–∏—è" in text:
                await start_booking_tour(message, state)
            else:
                await message.reply("–ù–µ –ø–æ–Ω—è–ª, –≤—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é –∏–ª–∏ —É—Ç–æ—á–Ω–∏!", reply_markup=get_main_menu())