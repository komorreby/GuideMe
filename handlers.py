from aiogram import types
from aiogram.filters import Command  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from database import museum_database
from ai_assistant import get_ai_response
from image_recognition import ImageRecognizer
import aiofiles
import os
from loguru import logger

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º
class UserState(StatesGroup):
    main_menu = State()
    exploring_halls = State()
    exploring_exhibits = State()
    searching = State()
    asking_question = State()
    route_navigation = State()

def setup(dp):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX."""
    recognizer = ImageRecognizer()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å

    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é (—Ä–µ–ø–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    def get_main_menu():
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üèõÔ∏è –ó–∞–ª—ã"), KeyboardButton(text="üñºÔ∏è –≠–∫—Å–ø–æ–Ω–∞—Ç—ã")],
                [KeyboardButton(text="‚ùì FAQ"), KeyboardButton(text="üîç –ü–æ–∏—Å–∫")],
                [KeyboardButton(text="üåç –ú–∞—Ä—à—Ä—É—Ç"), KeyboardButton(text="üí¨ –í–æ–ø—Ä–æ—Å AI")],
                [KeyboardButton(text="üîô –í –Ω–∞—á–∞–ª–æ")]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )

    # –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∑–∞–ª–∞–º
    def get_hall_navigation():
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–†–µ–Ω–µ—Å—Å–∞–Ω—Å", callback_data="hall_1"),
             InlineKeyboardButton(text="–ú–æ–¥–µ—Ä–Ω–∏–∑–º", callback_data="hall_2")],
            [InlineKeyboardButton(text="–í–æ—Å—Ç–æ—á–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ", callback_data="hall_3"),
             InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="next_hall")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

    @dp.message(Command("start"))
    async def send_welcome(message: types.Message, state: FSMContext):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        welcome_text = (
            "üé® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑–µ–π –∏—Å–∫—É—Å—Å—Ç–≤! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –≥–∏–¥. "
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è!"
        )
        await message.reply(welcome_text, reply_markup=get_main_menu())
        await state.set_state(UserState.main_menu)

    @dp.message(lambda message: message.text == "üèõÔ∏è –ó–∞–ª—ã", UserState.main_menu)
    async def start_halls_exploration(message: types.Message, state: FSMContext):
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:", reply_markup=get_hall_navigation())
        await state.set_state(UserState.exploring_halls)
        await state.update_data(hall_index=0)

    @dp.callback_query(lambda c: c.data.startswith("hall_"), UserState.exploring_halls)
    async def show_hall_details(callback: types.CallbackQuery, state: FSMContext):
        hall_id = int(callback.data.split("_")[1])
        hall = museum_database.get_hall_info(hall_id)
        if hall:
            response = f"*{hall[1]}*\n{hall[2]}\nüìç {hall[3]}\n–ü–µ—Ä–∏–æ–¥: {hall[5]}"
            await callback.message.edit_text(response, parse_mode="Markdown", reply_markup=get_hall_navigation())
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "next_hall", UserState.exploring_halls)
    async def next_hall(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        hall_index = data.get("hall_index", 0) + 1
        hall_ids = [1, 2, 3]
        if hall_index < len(hall_ids):
            hall = museum_database.get_hall_info(hall_ids[hall_index])
            response = f"*{hall[1]}*\n{hall[2]}\nüìç {hall[3]}\n–ü–µ—Ä–∏–æ–¥: {hall[5]}"
            await callback.message.edit_text(response, parse_mode="Markdown", reply_markup=get_hall_navigation())
            await state.update_data(hall_index=hall_index)
        else:
            await callback.message.edit_text("–í—Å–µ –∑–∞–ª—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!", reply_markup=get_hall_navigation())
        await callback.answer()

    @dp.message(lambda message: message.text == "üñºÔ∏è –≠–∫—Å–ø–æ–Ω–∞—Ç—ã", UserState.main_menu)
    async def start_exhibits_exploration(message: types.Message, state: FSMContext):
        exhibits = [museum_database.get_exhibit_info(i) for i in range(1, 6)]
        await state.update_data(exhibits=exhibits, exhibit_index=0)
        await show_next_exhibit(message, state)
        await state.set_state(UserState.exploring_exhibits)

    async def show_next_exhibit(message_or_callback: types.Message | types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        exhibits = data["exhibits"]
        index = data.get("exhibit_index", 0)
        if index < len(exhibits):
            ex = exhibits[index]
            response = f"*{ex[2]}*\n–ê–≤—Ç–æ—Ä: {ex[3]}\n{ex[4]}\n–°—Ç–∏–ª—å: {ex[5]}\n–ì–æ–¥: {ex[6]}"
            inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="next_exhibit"),
                 InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="prev_exhibit")],
                [InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
            if isinstance(message_or_callback, types.Message):
                await message_or_callback.reply(response, parse_mode="Markdown", reply_markup=inline_kb)
            else:
                await message_or_callback.message.edit_text(response, parse_mode="Markdown", reply_markup=inline_kb)

    @dp.callback_query(lambda c: c.data in ["next_exhibit", "prev_exhibit"], UserState.exploring_exhibits)
    async def navigate_exhibits(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        index = data.get("exhibit_index", 0)
        if callback.data == "next_exhibit":
            index += 1
        else:
            index = max(0, index - 1)
        await state.update_data(exhibit_index=index)
        await show_next_exhibit(callback, state)
        await callback.answer()

    @dp.message(lambda message: message.text == "‚ùì FAQ", UserState.main_menu)
    async def show_faq(message: types.Message):
        faqs = museum_database.get_faq()
        response = "‚ùì FAQ:\n\n" + "\n".join(f"‚ùî {q}\nüí° {a}" for q, a in faqs)
        await message.reply(response, reply_markup=get_main_menu())

    @dp.message(lambda message: message.text == "üîç –ü–æ–∏—Å–∫", UserState.main_menu)
    async def start_search(message: types.Message, state: FSMContext):
        await message.reply("–ù–∞–∑–æ–≤–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, —Ö—É–¥–æ–∂–Ω–∏–∫–∞ –∏–ª–∏ —Å—Ç–∏–ª—å!")
        await state.set_state(UserState.searching)

    @dp.message(UserState.searching)
    async def process_search(message: types.Message, state: FSMContext):
        results = museum_database.search_exhibits(message.text)
        response = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n" + (
            "\n".join(f"*{ex[2]}* ({ex[3]})\n{ex[4]}" for ex in results) if results else "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        )
        await message.reply(response, parse_mode="Markdown", reply_markup=get_main_menu())
        await state.set_state(UserState.main_menu)

    @dp.message(lambda message: message.text == "üåç –ü–æ–º–æ–≥–∏ —Å –ø—É—Ç–µ–º", UserState.main_menu)
    async def start_route(message: types.Message, state: FSMContext):
        await state.update_data(route_step=0)
        await show_route_step(message, state)
        await state.set_state(UserState.route_navigation)

    async def show_route_step(message_or_callback: types.Message | types.CallbackQuery, state: FSMContext):
        steps = [
            "1. –ó–∞–ª –†–µ–Ω–µ—Å—Å–∞–Ω—Å–∞: –Ω–∞—á–Ω–∏—Ç–µ —Å —à–µ–¥–µ–≤—Ä–æ–≤ –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è.",
            "2. –ó–∞–ª –ú–æ–¥–µ—Ä–Ω–∏–∑–º–∞: –ø–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –∏—Å–∫—É—Å—Å—Ç–≤–æ XX –≤–µ–∫–∞.",
            "3. –ó–∞–ª –í–æ—Å—Ç–æ—á–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞: –æ—Ç–∫—Ä–æ–π—Ç–µ –∞–∑–∏–∞—Ç—Å–∫—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é.",
            "4. –í—ã—Ö–æ–¥: –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç—É—Ä —É —Å—É–≤–µ–Ω–∏—Ä–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞."
        ]
        data = await state.get_data()
        step = data.get("route_step", 0)
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="next_step"),
             InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="prev_step")],
            [InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        response = f"üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç:\n{steps[step]}"
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.reply(response, reply_markup=inline_kb)
        else:
            await message_or_callback.message.edit_text(response, reply_markup=inline_kb)

    @dp.callback_query(lambda c: c.data in ["next_step", "prev_step"], UserState.route_navigation)
    async def navigate_route(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        step = data.get("route_step", 0)
        if callback.data == "next_step":
            step = min(step + 1, 3)
        else:
            step = max(0, step - 1)
        await state.update_data(route_step=step)
        await show_route_step(callback, state)
        await callback.answer()

    @dp.message(lambda message: message.text == "üí¨ –í–æ–ø—Ä–æ—Å AI", UserState.main_menu)
    async def start_asking(message: types.Message, state: FSMContext):
        await message.reply("–°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç–∏–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è!")
        await state.set_state(UserState.asking_question)

    @dp.message(UserState.asking_question)  # –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ—Ç–æ
    async def handle_question_or_photo(message: types.Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if message.photo:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            file_path = f"temp_{photo.file_id}.jpg"

            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                file = await message.bot.get_file(photo.file_id)
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                await message.bot.download_file(file.file_path, file_path)
                logger.debug(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {file_path}")

                recognized_objects = recognizer.recognize_image(file_path)
                matches = recognizer.match_with_exhibits(recognized_objects)

                if matches:
                    response = "üîç –ù–∞–π–¥–µ–Ω—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ–Ω–∞—Ç—ã:\n\n"
                    for obj, exhibit in matches:
                        response += (
                            f"*{exhibit[2]}*\n"
                            f"–û–±—ä–µ–∫—Ç: {obj['class']} (–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {obj['confidence']:.2%})\n"
                            f"–ê–≤—Ç–æ—Ä: {exhibit[3]}\n"
                            f"–û–ø–∏—Å–∞–Ω–∏–µ: {exhibit[4]}\n\n"
                        )
                else:
                    response = "üòï –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π —Å —ç–∫—Å–ø–æ–Ω–∞—Ç–∞–º–∏ –º—É–∑–µ—è.\n" + str(recognized_objects)

                inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ï—â—ë –≤–æ–ø—Ä–æ—Å", callback_data="more_questions"),
                    InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
                await message.reply(response, parse_mode="Markdown", reply_markup=inline_kb)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
                await message.reply(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            finally:
                if os.path.exists(file_path):
                    os.remove(file_path)
                    logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path} —É–¥–∞–ª—ë–Ω")
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            response = get_ai_response(message.text)
            inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ï—â—ë –≤–æ–ø—Ä–æ—Å", callback_data="more_questions"),
                InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
            await message.reply(response, reply_markup=inline_kb)

    @dp.callback_query(lambda c: c.data == "more_questions", UserState.asking_question)
    async def more_questions(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text("–ó–∞–¥–∞–π –µ—â—ë –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ!", reply_markup=None)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == "back_to_menu")
    async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.delete()
        await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        await state.set_state(UserState.main_menu)
        await callback.answer()

    @dp.message(lambda message: message.text == "üîô –í –Ω–∞—á–∞–ª–æ")
    async def reset_to_menu(message: types.Message, state: FSMContext):
        await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        await state.set_state(UserState.main_menu)

    @dp.message()
    async def handle_free_text(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state == UserState.main_menu.state:
            text = message.text.lower()
            if "–∑–∞–ª" in text:
                await start_halls_exploration(message, state)
            elif "—ç–∫—Å–ø–æ–Ω–∞—Ç" in text or "–∫–∞—Ä—Ç–∏–Ω" in text:
                await start_exhibits_exploration(message, state)
            elif "–ø–æ–∏—Å–∫" in text:
                await start_search(message, state)
            elif "–º–∞—Ä—à—Ä—É—Ç" in text:
                await start_route(message, state)
            elif "–≤–æ–ø—Ä–æ—Å" in text or "?" in text:
                await start_asking(message, state)
            else:
                await message.reply("–ù–µ –ø–æ–Ω—è–ª, –≤—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é –∏–ª–∏ —É—Ç–æ—á–Ω–∏!", reply_markup=get_main_menu())